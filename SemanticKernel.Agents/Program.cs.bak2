#pragma warning disable SKEXP0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
#pragma warning disable SKEXP0110

using Microsoft.Extensions.Configuration;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.Agents.Chat;
using Microsoft.SemanticKernel.ChatCompletion;
using SemanticKernel.Agents;


string ReviewerName = "ArtDirector";
string ReviewerInstructions =
    """
        You are an art director who has opinions about copywriting born of a love for David Ogilvy.
        The goal is to determine if the given copy is acceptable to print.
        If so, state that it is approved.
        If not, provide insight on how to refine suggested copy without examples.
        """;

const string CopyWriterName = "CopyWriter";
string CopyWriterInstructions =
    """
        You are a copywriter with ten years of experience and are known for brevity and a dry humor.
        The goal is to refine and decide on the single best copy as an expert in the field.
        Only provide a single proposal per response.
        You're laser focused on the goal at hand.
        Don't waste time with chit chat.
        Consider suggestions when refining an idea.
        """;


// Define the agents
ChatCompletionAgent agentReviewer =
    new()
    {
        Instructions = ReviewerInstructions,
        Name = ReviewerName,
        Kernel = KernelCreator.CreateKernel()
    };

ChatCompletionAgent agentWriter =
    new()
    {
        Instructions = CopyWriterInstructions,
        Name = CopyWriterName,
        Kernel = KernelCreator.CreateKernel()
    };

KernelFunction terminationFunction =
    KernelFunctionFactory.CreateFromPrompt(
        """
                Determine if the copy has been approved.  If so, respond with a single word: yes

                History:
                {{$history}}
                """);

KernelFunction selectionFunction =
    KernelFunctionFactory.CreateFromPrompt(
        $$$"""
                Your job is to determine which participant takes the next turn in a conversation according to the action of the most recent participant.
                State only the name of the participant to take the next turn.
                
                Choose only from these participants:
                - {{{ReviewerName}}}
                - {{{CopyWriterName}}}
                
                Always follow these rules when selecting the next participant:
                - After user input, it is {{{CopyWriterName}}}'a turn.
                - After {{{CopyWriterName}}} replies, it is {{{ReviewerName}}}'s turn.
                - After {{{ReviewerName}}} provides feedback, it is {{{CopyWriterName}}}'s turn.

                History:
                {{$history}}
                """);

// Create a chat for agent interaction.
AgentGroupChat chat =
    new(agentWriter, agentReviewer)
    {
        ExecutionSettings =
            new()
            {
                // Here KernelFunctionTerminationStrategy will terminate
                // when the art-director has given their approval.
                TerminationStrategy =
                    new KernelFunctionTerminationStrategy(terminationFunction, KernelCreator.CreateKernel())
                    {
                        // Only the art-director may approve.
                        Agents = [agentReviewer],
                        // Customer result parser to determine if the response is "yes"
                        ResultParser = (result) => result.GetValue<string>()?.Contains("yes", StringComparison.OrdinalIgnoreCase) ?? false,
                        // The prompt variable name for the history argument.
                        HistoryVariableName = "history",
                        // Limit total number of turns
                        MaximumIterations = 10,
                    },
                // Here a KernelFunctionSelectionStrategy selects agents based on a prompt function.
                SelectionStrategy =
                    new KernelFunctionSelectionStrategy(selectionFunction, KernelCreator.CreateKernel())
                    {
                        // Returns the entire result value as a string.
                        ResultParser = (result) => result.GetValue<string>() ?? CopyWriterName,
                        // The prompt variable name for the agents argument.
                        AgentsVariableName = "agents",
                        // The prompt variable name for the history argument.
                        HistoryVariableName = "history",
                    },
            }
    };

// Invoke chat and display messages.
string input = "concept: maps made out of egg cartons.";
chat.AddChatMessage(new ChatMessageContent(AuthorRole.User, input));
Console.WriteLine($"# {AuthorRole.User}: '{input}'");

await foreach (ChatMessageContent content in chat.InvokeAsync())
{
    Console.WriteLine($"# {content.Role} - {content.AuthorName ?? "*"}: '{content.Content}'");
    await Task.Delay(TimeSpan.FromMinutes(1));
}

Console.WriteLine($"# IS COMPLETE: {chat.IsComplete}");
#pragma warning restore SKEXP0001
#pragma warning restore SKEXP0110